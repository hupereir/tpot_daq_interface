#!/opt/venvs/sphenix-pytpc/bin/python
import sys, os
import time
import argparse
import concurrent.futures

from sphenix_pytpc import fee
import sphenix_pytpc.damserv_grpc_client as client

backend = 'grpc'

class FeeInit(object):
    def __init__(self, hostname, fee_list):
        self.d = client.Dam(0, "%s:50051" % (hostname))
        self.hostname = hostname
        self.fee_list = fee_list
        self.fee = []
        for i in self.fee_list:
            self.fee.append(fee(i, backend=backend, ip_addr="%s:50051" % (hostname)))

    def check_sampa(self, ff):
        return 0

    def do_fee_config(self, args):
        if self.do_fee_stream_enable:
            self.d.reg.fee_stream_enable = 0

        skipped = []
        for i, f in enumerate(self.fee):
            if ((self.d.reg.fee_reply[i].rx_ready != 1) or (f.board_sn() == 0)):
                skipped.append(f.fee_addr)
                continue
            check_sampa(f);
        return skipped

def fee_init_exec(host, fee_list, args):
    fee_init = FeeInit(host, fee_list)
    skipped = fee_init.check_sampa()
    if (len(skipped) > 0):
      print("FEEs skipped:", skipped)
    return 0

if __name__ == "__main__":
    rlookup = {'R2': [0, 1, 11, 12, 14, 15, 18, 19],
               'R1': [2, 3, 4, 13, 16, 17],
               'R3': [5, 6, 7, 8, 9, 10, 20, 21, 22, 23, 24, 25],
               'TPOT' : [0, 1, 5, 6, 7, 8, 9, 12, 14, 15, 18, 19, 21, 23, 24, 25]}
#               'TPOT' : [0, 1, 5, 6, 7, 8, 9, 11, 12, 14, 15, 18, 19, 23, 24, 25]}


    argp = argparse.ArgumentParser()
    argp.add_argument("-f", "--fee", nargs='*', type=int, default=range(0, 26))
    argp.add_argument("-r", "--region", type=str, choices=["R1", "R2", "R3", "TPOT"])
    argp.add_argument("-c", "--connect", type=str, nargs='*', default="localhost")
    argp.add_argument("--connect-tpc", action='store_true', default=False)
    argp.add_argument("--connect-tpot", action='store_true', default=False)
    argp.add_argument("--reset-sampa", action='store_true', default=False)

    args = argp.parse_args()

    if args.region:
        fee_list = rlookup[args.region]
    else:
        fee_list = args.fee

    hostlist = args.connect
    if args.connect == 'localhost':
        hostlist = [args.connect]

    if args.connect_tpc:
        hostlist = []
        for i in range(0, 24):
            hostlist.append("ebdc%02i.sphenix.bnl.gov" % i)
    if args.connect_tpot:
        hostlist = []
        hostlist.append("ebdc39.sphenix.bnl.gov")

    with concurrent.futures.ThreadPoolExecutor(max_workers=24) as executor:
        future_to_fee = {executor.submit(fee_init_exec, host, fee_list, args): host for host in hostlist}
        for future in concurrent.futures.as_completed(future_to_fee):
            ret = future_to_fee[future]
            try:
                data = future.result()
            except Exception as exc:
                print('%r generated an exception: %s' % (ret, exc))

