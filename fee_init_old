#!/opt/venvs/sphenix-pytpc/bin/python
import sys, os
import time
import argparse
import concurrent.futures

from sphenix_pytpc import fee
import sphenix_pytpc.damserv_grpc_client as client

backend = 'grpc'

class FeeInit(object):
    def __init__(self, hostname, fee_list, do_fee_stream_enable):
        self.d = client.Dam(0, '%s:50051' % hostname)
        self.fee_list = fee_list
        self.do_fee_stream_enable = do_fee_stream_enable

    def fee_link_reset(self):
        self.d.reg.si5345_pll.program = 1
        while self.d.reg.si5345_pll.nLOL != 1:
            time.sleep(0.1)

    def fee_ready(self, i):
        timeout = 0
        while (self.d.reg.fee_reply[i].rx_ready != 1) and (timeout < 10):
            time.sleep(0.1)
            timeout += 1
        return (self.d.reg.fee_reply[i].rx_ready == 1) and (timeout < 10)

    def fee_group_ready(self):
        timeout = 0
        ready = False 
        time.sleep(5)
        while (not ready) and (timeout < 24):
            ready = True
            for i in self.fee_list:
                ready &= bool(self.d.reg.fee_reply[i].rx_ready)
            time.sleep(1)
            timeout += 1
        return ready

    def link_init(self):
        self.d.reset()

        self.d.reg.gtm_recovered_clock = 1
        if self.do_fee_stream_enable:
            self.d.reg.fee_stream_enable = 0
        timeout = 0

        self.fee_link_reset()

        while not self.fee_group_ready():
            self.fee_link_reset()

    def fee_init(self, elink_enable):
        if self.do_fee_stream_enable:
            self.d.reg.fee_stream_enable = 0

        for i in self.fee_list:
            f = fee(i, backend=backend)
            f.reg_write(0x200, elink_enable & 0xffff)
            f.reg_write(0x201, elink_enable >> 16)
            print(i, hex(f.reg_read(0x200)), hex(f.reg_read(0x201)))

        if self.do_fee_stream_enable:
            for i in self.fee_list:
                self.d.reg.fee_stream_enable |= (1 << i)

    def sampa_init(self, twlen, pre_trig, sampa_reset, elink_enable, shape_gain):
        if self.do_fee_stream_enable:
            self.d.reg.fee_stream_enable = 0

        for i in self.fee_list:
            f = fee(i, backend=backend)

            if sampa_reset:
                f.sampa_reset()
                time.sleep(10)
                print(f.elink_status())

            for s in f.sampa:
                try:
                    s.set_time_window_length(twlen)
                    if s.get_time_window_length() != twlen:
                        print(s, end=": ")
                        print("WARNING: Unexpected time window length!")
                except Exception as e:
                    print(s, end=": ")
                    print("Can't set time window length due to", e)

                try:
                    s.set_pre_trigger(pre_trig)
                    if s.get_pre_trigger() != pre_trig:
                        print(s, end=": ")
                        print("WARNING: Unexpected pre trigger length!")
                except Exception as e:
                    print(s, end=": ")
                    print("Can't set pre trigger due to", e)
                    continue

            f.reg_write(0x300, shape_gain)
            f.reg_write(0x200, elink_enable & 0xffff)
            f.reg_write(0x201, elink_enable >> 16)
            print(i, hex(f.reg_read(0x200)), hex(f.reg_read(0x201)))

        if self.do_fee_stream_enable:
            for i in self.fee_list:
                self.d.reg.fee_stream_enable |= (1 << i)

    def stream_enable(self): 
        if self.do_fee_stream_enable:
            for i in self.fee_list:
                self.d.reg.fee_stream_enable |= (1 << i)

    def stream_disable(self): 
        if self.do_fee_stream_enable:
            for i in self.fee_list:
                self.d.reg.fee_stream_enable &= ~(1 << i)

def fee_init_exec(host, fee_list, args):
    fee_init = FeeInit(host, fee_list, args.no_stream_enable) 

    if args.init_type == 'stream_enable':
        fee_init.stream_enable()
    if args.init_type == 'stream_disable':
        fee_init.stream_disable()
    if args.init_type == 'link':
        fee_init.link_init()
    if args.init_type == 'fee':
        fee_init.fee_init(args.elink_enable)
    if args.init_type == 'sampa':
        fee_init.sampa_init(args.samples , args.pre_samples, args.reset_sampa, args.elink_enable, args.shape_gain)
    if args.init_type == 'all':
        fee_init.link_init()
        fee_init.fee_init(args.elink_enable)
        fee_init.sampa_init(args.samples, args.pre_samples, args.reset_sampa, args.elink_enable, args.shape_gain)

    return 0

if __name__ == "__main__":
    rlookup = {'R2': [0, 1, 11, 12, 14, 15, 18, 19],
               'R1': [2, 3, 4, 13, 16, 17],
               'R3': [5, 6, 7, 8, 9, 10, 20, 21, 22, 23, 24, 25],
               'TPOT' : [0, 1, 5, 6, 7, 8, 9, 11, 12, 14, 15, 18, 19, 23, 24, 25]}

    argp = argparse.ArgumentParser()
    argp.add_argument("init_type", type=str, choices=["link", "fee", "sampa", "stream_enable", "stream_disable", "all"], default="all")
    argp.add_argument("-f", "--fee", nargs='*', type=int, default=range(0, 26))
    argp.add_argument("-r", "--region", type=str, choices=["R1", "R2", "R3", "TPOT"])
    argp.add_argument("-p", "--pre-samples", type=int, default=80)
    argp.add_argument("-s", "--samples", type=int, default=360)
    argp.add_argument("-e", "--elink-enable", type=int, default=0xffffffff)
    argp.add_argument("-g", "--shape-gain", type=int, default=0)
    argp.add_argument("-c", "--connect", type=str, nargs='*', default="localhost")
    argp.add_argument("--connect-tpc", action='store_true', default=False)
    argp.add_argument("--connect-tpot", action='store_true', default=False)
    argp.add_argument("--reset-sampa", action='store_true', default=False)
    argp.add_argument("--no-stream-enable", action='store_false', default=True)

    args = argp.parse_args() 

    if args.region:
        fee_list = rlookup[args.region]
    else:
        fee_list = args.fee

    hostlist = args.connect
    if args.connect == 'localhost':
        hostlist = [args.connect]
    
    if args.connect_tpc:
        hostlist = []
        for i in range(0, 24):
            hostlist.append("ebdc%02i.sphenix.bnl.gov" % i)
    if args.connect_tpot:
        hostlist = []
        hostlist.append("ebdc39.sphenix.bnl.gov")

    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
        future_to_fee = {executor.submit(fee_init_exec, host, fee_list, args): host for host in hostlist}
        for future in concurrent.futures.as_completed(future_to_fee):
            ret = future_to_fee[future]
            try:
                data = future.result()
            except Exception as exc:
                print('%r generated an exception: %s' % (ret, exc))

